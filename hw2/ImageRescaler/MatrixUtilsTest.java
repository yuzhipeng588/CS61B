import org.junit.Test;
import static org.junit.Assert.*;

/** FIXME
 *  @author Zhipeng Yu
 */
  /*  Sample input:
          *  1000000   1000000   1000000   1000000
          *  1000000     75990     30003   1000000
          *  1000000     30002    103046   1000000
          *  1000000     29515     38273   1000000
          *  1000000     73403     35399   1000000
          *  1000000   1000000   1000000   1000000
          *
          *  Output for sample input:
          *  1000000   1000000   1000000   1000000
          *  2000000   1075990   1030003   2000000
          *  2075990   1060005   1133049   2030003
          *  2060005   1089520   1098278   2133049
          *  2089520   1162923   1124919   2098278
          *  2162923   2124919   2124919   2124919
          *
          */
public class MatrixUtilsTest {
    /** FIXME
     */
    @Test
    public void testAccuVerti() {
        double[][] m = {{1000000, 1000000, 1000000, 1000000}, {1000000, 75990, 30003, 1000000}, {1000000, 30002, 103046, 1000000},
                {1000000, 29515, 38273, 1000000}, {1000000, 73403, 35399, 1000000}, {1000000, 1000000, 1000000, 1000000}};
        double[][] mnew = {{1000000, 1000000, 1000000, 1000000}, {2000000, 1075990, 1030003, 2000000}, {2075990, 1060005, 1133049, 2030003},
                {2060005, 1089520, 1098278, 2133049}, {2089520, 1162923, 1124919, 2098278}, {2162923, 2124919, 2124919, 2124919}};
        MatrixUtils M=new MatrixUtils();
        assertArrayEquals("AccuVerti", mnew,M.accumulateVertical(m));
    }
    @Test
    public void testAccumulate() {
        double[][] mv= {{1000000, 1000000, 1000000, 1000000}, {1000000, 75990, 30003, 1000000}, {1000000, 30002, 103046, 1000000},
                {1000000, 29515, 38273, 1000000}, {1000000, 73403, 35399, 1000000}, {1000000, 1000000, 1000000, 1000000}};
        double[][] mnewv = {{1000000, 1000000, 1000000, 1000000}, {2000000, 1075990, 1030003, 2000000}, {2075990, 1060005, 1133049, 2030003},
                {2060005, 1089520, 1098278, 2133049}, {2089520, 1162923, 1124919, 2098278}, {2162923, 2124919, 2124919, 2124919}};
        double[][] mh={{1000000,1000000},{1000000,     75990},{1000000,     30002},
                {1000000,     29515},{1000000,     73403},{1000000,   1000000}};
        double[][]mnewh={{1000000,2000000},{1000000,     1075990},{1000000,     1030002},
                {1000000,     1029515},{1000000,     1073403},{1000000,   2000000}};
        MatrixUtils M=new MatrixUtils();
        assertArrayEquals("Accu", mnewv,M.accumulate(mv,MatrixUtils.Orientation.VERTICAL));
        assertArrayEquals("Accu", mnewh,M.accumulate(mh,MatrixUtils.Orientation.HORIZONTAL));
    }
    @Test
    public void testFindVerseam() {
        double[][] mv= {{1000000, 1000000, 1000000, 1000000}, {1000000, 75990, 30003, 1000000}, {1000000, 30002, 103046, 1000000},
                {1000000, 29515, 38273, 1000000}, {1000000, 73403, 35399, 1000000}, {1000000, 1000000, 1000000, 1000000}};
        int[] a={2, 2, 1, 1, 2, 1};
        MatrixUtils M=new MatrixUtils();
        assertArrayEquals("SeamVerti", a,M.findVerticalSeam(mv));
    }
    @Test
    public void testFindseam() {
        double[][] mv= {{1000000, 1000000, 1000000, 1000000}, {1000000, 75990, 30003, 1000000}, {1000000, 30002, 103046, 1000000},
                {1000000, 29515, 38273, 1000000}, {1000000, 73403, 35399, 1000000}, {1000000, 1000000, 1000000, 1000000}};
        double[][] mh={{1000000,1000000},{1000000,     75990},{1000000,     30002},
                {1000000,     29515},{1000000,     73403},{1000000,   1000000}};
        int[] a={2, 2, 1, 1, 2, 1};
        int[] b={3,3};
        MatrixUtils M=new MatrixUtils();
        assertArrayEquals("Seam", a,M.findSeam(mv,MatrixUtils.Orientation.VERTICAL));
        assertArrayEquals("Seam", b,M.findSeam(mh,MatrixUtils.Orientation.HORIZONTAL));
    }
    public static void main(String[] args) {
        System.exit(ucb.junit.textui.runClasses(MatrixUtilsTest.class));
    }
}
